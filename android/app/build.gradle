def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def googleMapsDevApiKey = localProperties.getProperty('googleMaps.apiKeyDev')
if (googleMapsDevApiKey == null) {
    googleMapsDevApiKey = System.getenv("BITRISEIO_ANDROID_MAPS_KEY_DEV")
}

def googleMapsProdApiKey = localProperties.getProperty('googleMaps.apiKeyProd')
if (googleMapsProdApiKey == null) {
    googleMapsProdApiKey = System.getenv("BITRISEIO_ANDROID_MAPS_KEY_PROD")
}


apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        //TODO remove when https://github.com/flutter/flutter/issues/60687 is fixed
        checkReleaseBuilds false
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "pl.flutterdevs.allthenews"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile = file("keystore/debug.keystore")
            keyAlias = "androiddebugkey"
            storePassword = "android"
            keyPassword = "android"
        }

        release {
            storeFile file(System.getenv("HOME") + "/keystores/allthenews.keystore")
            storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
            keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.release.storeFile.exists() ? signingConfigs.release : signingConfigs.debug
        }
    }

    flavorDimensions "flavor-type"

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            manifestPlaceholders = [
                    appName: "AllTheNews DEV",
                    googleMapsApiKey: googleMapsDevApiKey
            ]
        }

        prod {
            dimension "flavor-type"
            manifestPlaceholders = [
                    appName: "AllTheNews",
                    googleMapsApiKey: googleMapsProdApiKey
            ]
        }

    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.firebase:firebase-analytics-ktx:17.4.4'
    implementation 'com.google.firebase:firebase-crashlytics:17.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
